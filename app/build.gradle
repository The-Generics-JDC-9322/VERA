apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'org.jetbrains.dokka-android'

apply plugin: 'kotlinx-serialization'

apply plugin: 'jacoco'


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "edu.gatech.vera.vera"
        minSdkVersion 20
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
        debug {
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/INDEX.LIST'
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation ('com.android.support:appcompat-v7:28.0.0'){force = true}
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation ('com.android.support:design:28.0.0'){force = true}

    implementation 'com.android.support:multidex:1.0.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation ('com.android.support.test:runner:1.0.2'){force = true}
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation ('com.android.support:cardview-v7:28.0.0'){force = true}
    implementation ('com.android.support:customtabs:28.0.0'){force = true}
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    implementation "io.ktor:ktor-server-netty:1.3.0"
    implementation "io.ktor:ktor-websockets:1.3.0"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version" // or "kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0" // JVM dependency

    implementation 'org.slf4j:slf4j-android:1.7.30'
    implementation 'com.android.volley:volley:1.1.1'

    androidTestImplementation 'com.tinder.scarlet:scarlet:0.1.9'
    androidTestImplementation 'com.tinder.scarlet:lifecycle-android:0.1.9'
    androidTestImplementation 'com.tinder.scarlet:websocket-okhttp:0.1.9'
    androidTestImplementation 'com.tinder.scarlet:stream-adapter-rxjava2:0.1.9'
    androidTestImplementation "com.squareup.okhttp3:okhttp:4.3.1"
    androidTestImplementation 'com.squareup.okhttp3:logging-interceptor:4.3.1'

    testImplementation 'com.tinder.scarlet:scarlet:0.1.9'
    testImplementation 'com.tinder.scarlet:message-adapter-built-in:0.1.9'
    testImplementation 'com.tinder.scarlet:stream-adapter-built-in:0.1.9'
    testImplementation 'com.tinder.scarlet:scarlet-core-internal:0.1.9'

    testImplementation 'com.tinder.scarlet:websocket-okhttp:0.1.9'
    testImplementation 'com.tinder.statemachine:statemachine:0.2.0'
    testImplementation "com.squareup.okhttp3:okhttp:4.3.1"
    testImplementation "com.squareup.okhttp3:logging-interceptor:4.3.1"
    testImplementation 'io.reactivex.rxjava2:rxjava:2.1.16'

    implementation ('com.google.android.gms:play-services-location:16.0.0'){force = true}

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile)
        .matching { it.name == "compileDebugAndroidTestKotlin" }
        .all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile)
        .matching { it.name == "compileDebugUnitTestKotlin" }
        .all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

//# Our merge report task

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

jacoco {
    toolVersion = '0.8.0'
}
